package main

var tableTemplateSrc = `package {{.GoPackage}}
// generated by pgtalk-gen on {{.Created.Format "Mon, 02 Jan 2006 15:04:05 MST" }} 
// DO NOT EDIT

import (
	p "github.com/emicklei/pgtalk"
	"time"
	"github.com/jackc/pgtype"
)

// {{.GoType}} is generated from the {{.Schema}}.{{.TableName}} table.
type {{.GoType}} struct {
{{- range .Fields}}
	{{.GoName}}	{{.GoType}} // {{.Name}} : {{.DataType}}
{{- end}}
}

var (
{{- range .Fields}}	
	// {{.GoName}} represents the column "{{.Name}}" of with type "{{.DataType}}", nullable:{{.IsNotNull}}, primary:{{.IsPrimary}}
	{{.GoName}} = p.{{.FactoryMethod}}(p.MakeColumnInfo(tableInfo, "{{.Name}}", {{.IsPrimarySrc}}, {{.IsNotNullSrc}}, {{.TableAttributeNumber}}),
		func(dest interface{}, v {{.GoType}}) { dest.(*{{$.GoType}}).{{.GoName}} = v })
{{- end}}
	// package private
	_ = time.Now()
	_ = pgtype.Empty // for the occasional unused import
	tableInfo = p.TableInfo{Schema: "{{.Schema}}", Name: "{{.TableName}}", Alias: "{{.TableAlias}}"}
	tableAccess = p.TableAccessor{TableInfo: tableInfo, 
		Factory: func() interface{}{return new({{.GoType}})}, AllColumns: []p.ColumnAccessor{
{{- range .Fields}}{{.GoName}},{{- end}}
}}
)

{{- range .Fields}}

// Set{{.GoName}} set the address of the value to the field value and returns the receiver.
func (e *{{$.GoType}}) Set{{.GoName}}(v {{.NonPointerGoType}}) *{{$.GoType}} { e.{{.GoName}} = &v ; return e }
{{- end}}

// Setters returns the list of changes to a {{.GoType}} for which updates/inserts need to be processed.
// Can be used in Insert,Update,Select. Cannot be used to set null values for columns.
func (e *{{.GoType}}) Setters() (list []p.ColumnAccessor) {
{{- range .Fields}}
	if e.{{.GoName}} != nil {
		list = append(list, {{.GoName}}.Set(*e.{{.GoName}}))
	}
{{- end}}	
	return
}

// String returns the debug string for *{{.GoType}} with all non-nil field values.
func (e *{{.GoType}}) String() string {
	return p.StringWithFields(e, p.HideNilValues)
}

// AllColumns returns the list of all column accessors for usage in e.g. Select.
func AllColumns() []p.ColumnAccessor {
	return tableAccess.AllColumns
}

// Select returns a new QuerySet[{{.GoType}}] for fetching column data.
func Select(cas ...p.ColumnAccessor) p.QuerySet[{{.GoType}}] {
	return p.MakeQuerySet[{{.GoType}}](tableAccess, cas)
}

// Insert creates a MutationSet for inserting data with zero or more columns.
func Insert(cas ...p.ColumnAccessor) p.MutationSet[{{.GoType}}] {
	return p.MakeMutationSet[{{.GoType}}](tableAccess, cas, p.MutationInsert)
}

// Delete creates a MutationSet for deleting data.
func Delete() p.MutationSet[{{.GoType}}] {
	return p.MakeMutationSet[{{.GoType}}](tableAccess, p.EmptyColumnAccessor, p.MutationDelete)
}

// Update creates a MutationSet to update zero or more columns.
func Update(cas ...p.ColumnAccessor) p.MutationSet[{{.GoType}}] {
	return p.MakeMutationSet[{{.GoType}}](tableAccess, cas, p.MutationUpdate)
}
`
