package categories
// generated by pgtalk-gen on Mon, 27 Dec 2021 11:13:09 CET 
// DO NOT EDIT

import (
	"database/sql"
	p "github.com/emicklei/pgtalk"
	"time"
	"github.com/jackc/pgtype"
)

// Category is generated from the public.categories table.
type Category struct {
	ID	int64 // id : integer
	Title	sql.NullString // title : text
}

var (	
	// ID represents the column "id" of with type "integer", nullable:true, primary:true
	ID = p.NewInt64Access(p.MakeColumnInfo(tableInfo, "id", p.IsPrimary, p.NotNull, 1),
			func(dest interface{}, v int64) { dest.(*Category).ID = v }, nil)	
	// Title represents the column "title" of with type "text", nullable:false, primary:false
	Title = p.NewTextAccess(p.MakeColumnInfo(tableInfo, "title", p.NotPrimary, p.Nullable, 2),
			nil, func(dest interface{}, v sql.NullString) { dest.(*Category).Title = v })
	// package private
	_ = time.Now
	_ = sql.Register // if no field is nullable
	_ = pgtype.Empty // for the occasional unused import from pgtype
	tableInfo = p.TableInfo{Schema: "public", Name: "categories", Alias: "c1" }
)

func init() {
	// after var initialization (to prevent cycle) we need to update the tableInfo to set all columns
	tableInfo.Columns = []p.ColumnAccessor{ID,Title, }
}

// SetID set the value to the field value and returns the receiver.
func (e *Category) SetID(v int64) *Category { e.ID = v ; return e }

// SetTitle set the address of the value to the field value and returns the receiver.
func (e *Category) SetTitle(v sql.NullString) *Category { e.Title = v ; return e }

// Setters returns the list of changes to a Category for which updates/inserts need to be processed.
// Can be used in Insert,Update,Select. Cannot be used to set null values for columns.
func (e *Category) Setters() (list []p.ColumnAccessor) {
	if e.ID != 0 {
		list = append(list, ID.Set(e.ID))
	}
	if e.Title.Valid {
		list = append(list, Title.Set(e.Title.String))
	}	
	return
}

// String returns the debug string for *Category with all non-nil field values.
func (e *Category) String() string {
	return p.StringWithFields(e, p.HideNilValues)
}

// AllColumns returns the list of all column accessors for usage in e.g. Select.
func AllColumns() []p.ColumnAccessor {
	return tableInfo.Columns
}

// Select returns a new QuerySet[Category] for fetching column data.
func Select(cas ...p.ColumnAccessor) p.QuerySet[Category] {
	return p.MakeQuerySet[Category](tableInfo, cas)
}

// Insert creates a MutationSet for inserting data with zero or more columns.
func Insert(cas ...p.ColumnAccessor) p.MutationSet[Category] {
	return p.MakeMutationSet[Category](tableInfo, cas, p.MutationInsert)
}

// Delete creates a MutationSet for deleting data.
func Delete() p.MutationSet[Category] {
	return p.MakeMutationSet[Category](tableInfo, p.EmptyColumnAccessor, p.MutationDelete)
}

// Update creates a MutationSet to update zero or more columns.
func Update(cas ...p.ColumnAccessor) p.MutationSet[Category] {
	return p.MakeMutationSet[Category](tableInfo, cas, p.MutationUpdate)
}
