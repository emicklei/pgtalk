package things
// generated by pgtalk-gen on Sun, 05 Dec 2021 14:02:25 CET 
// DO NOT EDIT

import (
	p "github.com/emicklei/pgtalk"
	"time"
	"fmt"
	"bytes"
	"github.com/jackc/pgtype"
)

// Thing is generated from the public.things table.
type Thing struct {
	ID	*int64 // id : integer
	Tdate	*time.Time // tdate : date
	Ttimestamp	*time.Time // ttimestamp : timestamp without time zone
	Tjson	*string // tjson : jsonb
}

var (	
	ID = p.NewInt64Access(p.MakeColumnInfo(tableInfo, "id", p.IsPrimary, p.NotNull, 1),
		func(dest interface{}, v *int64) { dest.(*Thing).ID = v })	
	Tdate = p.NewTimeAccess(p.MakeColumnInfo(tableInfo, "tdate", p.NotPrimary, p.Nullable, 2),
		func(dest interface{}, v *time.Time) { dest.(*Thing).Tdate = v })	
	Ttimestamp = p.NewTimeAccess(p.MakeColumnInfo(tableInfo, "ttimestamp", p.NotPrimary, p.Nullable, 3),
		func(dest interface{}, v *time.Time) { dest.(*Thing).Ttimestamp = v })	
	Tjson = p.NewJSONBAccess(p.MakeColumnInfo(tableInfo, "tjson", p.NotPrimary, p.Nullable, 4),
		func(dest interface{}, v *string) { dest.(*Thing).Tjson = v })
	// package private
	_ = time.Now()
	_ = pgtype.Empty // for the occasional unused import
	tableInfo = p.TableInfo{Schema: "public", Name: "things", Alias: "t1"}
	tableAccess = p.TableAccessor{TableInfo: tableInfo, 
		Factory: func() interface{}{return new(Thing)}, AllColumns: []p.ColumnAccessor{ID,Tdate,Ttimestamp,Tjson,
}}
)

// ColumnUpdatesFrom returns the list of changes to a Thing for which updates need to be processed.
// Cannot be used to set null values for columns.
func ColumnUpdatesFrom(e *Thing) (list []p.SQLExpression) {
	if e.ID != nil {
		list = append(list, ID.Set(*e.ID))
	}
	if e.Tdate != nil {
		list = append(list, Tdate.Set(*e.Tdate))
	}
	if e.Ttimestamp != nil {
		list = append(list, Ttimestamp.Set(*e.Ttimestamp))
	}
	if e.Tjson != nil {
		list = append(list, Tjson.Set(*e.Tjson))
	}	
	return
}

// String returns the debug string for *Thing with all non-nil field values.
func (e *Thing) String() string {
	b := new(bytes.Buffer)
	fmt.Fprint(b, "things.Thing{")
	if e.ID != nil {
		fmt.Fprintf(b, "ID:%v ", *e.ID)
	}
	if e.Tdate != nil {
		fmt.Fprintf(b, "Tdate:%v ", *e.Tdate)
	}
	if e.Ttimestamp != nil {
		fmt.Fprintf(b, "Ttimestamp:%v ", *e.Ttimestamp)
	}
	if e.Tjson != nil {
		fmt.Fprintf(b, "Tjson:%v ", *e.Tjson)
	}
	fmt.Fprint(b, "}")
	return b.String()
}

// AllColumns returns the list of all column accessors for usage in e.g. Select.
func AllColumns() []p.ColumnAccessor {
	return tableAccess.AllColumns
}

// Select returns a new QuerySet[Thing] for fetching column data.
func Select(cas ...p.ColumnAccessor) p.QuerySet[Thing] {
	return p.MakeQuerySet[Thing](tableAccess, cas)
}

// Insert creates a MutationSet for inserting data with zero or more columns.
func Insert(cas ...p.ColumnAccessor) p.MutationSet[Thing] {
	return p.MakeMutationSet[Thing](tableAccess, cas, p.MutationInsert)
}

// Delete creates a MutationSet for deleting data.
func Delete() p.MutationSet[Thing] {
	return p.MakeMutationSet[Thing](tableAccess, p.EmptyColumnAccessor, p.MutationDelete)
}

// Update creates a MutationSet to update zero or more columns.
func Update(cas ...p.ColumnAccessor) p.MutationSet[Thing] {
	return p.MakeMutationSet[Thing](tableAccess, cas, p.MutationUpdate)
}
