package things
// generated by pgtalk-gen on 2021-07-13 17:12:48.025159 &#43;0200 CEST m=&#43;0.027939741 
// DO NOT EDIT

import (
	"github.com/emicklei/pgtalk"
	"time"
	"fmt"
	"bytes"
)

var (
	_ = time.Now()
	tableInfo = pgtalk.TableInfo{Schema: "public", Name: "things", Alias: "t1"}
)

type Thing struct {
	TDate	*time.Time // date
	TTimestamp	*time.Time // timestamp without time zone
}

var (	
	TDate = pgtalk.NewTimeAccess(tableInfo, "tDate", func(dest interface{}, v *time.Time) { dest.(*Thing).TDate = v })	
	TTimestamp = pgtalk.NewTimeAccess(tableInfo, "tTimestamp", func(dest interface{}, v *time.Time) { dest.(*Thing).TTimestamp = v })
)

func (e *Thing) String() string {
	b := new(bytes.Buffer)
	fmt.Fprint(b, "things.Thing{")
	if e.TDate != nil {
		fmt.Fprintf(b, "TDate:%v ", *e.TDate)
	}
	if e.TTimestamp != nil {
		fmt.Fprintf(b, "TTimestamp:%v ", *e.TTimestamp)
	}
	fmt.Fprint(b, "}")
	return b.String()
}

func AllColumns() (all []pgtalk.ColumnAccessor) {
	return append(all,TDate,TTimestamp)
}

func Select(cas ...pgtalk.ColumnAccessor) ThingsQuerySet {
	return ThingsQuerySet{pgtalk.MakeQuerySet(tableInfo, cas, func() interface{} {
		return new(Thing)
	})}
}

type ThingsQuerySet struct {
	pgtalk.QuerySet
}

func (s ThingsQuerySet) Unwrap() pgtalk.QuerySet { return s.QuerySet }

// Where is
func (s ThingsQuerySet) Where(condition pgtalk.SQLWriter) ThingsQuerySet {
	return ThingsQuerySet{QuerySet: s.QuerySet.Where(condition)}
}

// Limit is
func (s ThingsQuerySet) Limit(limit int) ThingsQuerySet {
	return ThingsQuerySet{QuerySet: s.QuerySet.Limit(limit)}
}

// GroupBy is
func (s ThingsQuerySet) GroupBy(cas ...pgtalk.ColumnAccessor) ThingsQuerySet {
	return ThingsQuerySet{QuerySet: s.QuerySet.GroupBy(cas...)}
}

// GroupBy is
func (s ThingsQuerySet) OrderBy(cas ...pgtalk.ColumnAccessor) ThingsQuerySet {
	return ThingsQuerySet{QuerySet: s.QuerySet.OrderBy(cas...)}
}

// Exec is
func (s ThingsQuerySet) Exec(conn pgtalk.Connection) (list []*Thing, err error) {
	err = s.QuerySet.ExecWithAppender(conn, func(each interface{}) {
		list = append(list, each.(*Thing))
	})
	return
}

func Insert(cas ...pgtalk.ColumnAccessor) pgtalk.MutationSet {
	return pgtalk.MakeMutationSet(tableInfo, cas, pgtalk.MutationInsert)
}

func Delete() pgtalk.MutationSet {
	return pgtalk.MakeMutationSet(tableInfo, pgtalk.EmptyColumnAccessor, pgtalk.MutationDelete)
}

func Update(cas ...pgtalk.ColumnAccessor) pgtalk.MutationSet {
	return pgtalk.MakeMutationSet(tableInfo, cas, pgtalk.MutationUpdate)
}
