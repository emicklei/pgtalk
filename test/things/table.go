package things

// generated by pgtalk-gen on Fri, 10 Dec 2021 16:38:45 CET
// DO NOT EDIT

import (
	p "github.com/emicklei/pgtalk"
	"github.com/jackc/pgtype"
	"time"
)

// Thing is generated from the public.things table.
type Thing struct {
	ID         *int64     `json:"id"` // id : integer
	Tdate      *time.Time // tdate : date
	Ttimestamp *time.Time // ttimestamp : timestamp without time zone
	Tjson      *string    // tjson : jsonb
}

var (
	// ID represents the column "id" of with type "integer", nullable:true, primary:true
	ID = p.NewInt64Access(p.MakeColumnInfo(tableInfo, "id", p.IsPrimary, p.NotNull, 1),
		func(dest interface{}, v *int64) { dest.(*Thing).ID = v })
	// Tdate represents the column "tdate" of with type "date", nullable:false, primary:false
	Tdate = p.NewTimeAccess(p.MakeColumnInfo(tableInfo, "tdate", p.NotPrimary, p.Nullable, 2),
		func(dest interface{}, v *time.Time) { dest.(*Thing).Tdate = v })
	// Ttimestamp represents the column "ttimestamp" of with type "timestamp without time zone", nullable:false, primary:false
	Ttimestamp = p.NewTimeAccess(p.MakeColumnInfo(tableInfo, "ttimestamp", p.NotPrimary, p.Nullable, 3),
		func(dest interface{}, v *time.Time) { dest.(*Thing).Ttimestamp = v })
	// Tjson represents the column "tjson" of with type "jsonb", nullable:false, primary:false
	Tjson = p.NewJSONBAccess(p.MakeColumnInfo(tableInfo, "tjson", p.NotPrimary, p.Nullable, 4),
		func(dest interface{}, v *string) { dest.(*Thing).Tjson = v })
	// package private
	_           = time.Now()
	_           = pgtype.Empty // for the occasional unused import
	tableInfo   = p.TableInfo{Schema: "public", Name: "things", Alias: "t1"}
	tableAccess = p.TableAccessor{TableInfo: tableInfo,
		Factory: func() interface{} { return new(Thing) }, AllColumns: []p.ColumnAccessor{ID, Tdate, Ttimestamp, Tjson}}
)

// SetID set the address of the value to the field value and returns the receiver.
func (e *Thing) SetID(v int64) *Thing { e.ID = &v; return e }

// SetTdate set the address of the value to the field value and returns the receiver.
func (e *Thing) SetTdate(v time.Time) *Thing { e.Tdate = &v; return e }

// SetTtimestamp set the address of the value to the field value and returns the receiver.
func (e *Thing) SetTtimestamp(v time.Time) *Thing { e.Ttimestamp = &v; return e }

// SetTjson set the address of the value to the field value and returns the receiver.
func (e *Thing) SetTjson(v string) *Thing { e.Tjson = &v; return e }

// Setters returns the list of changes to a Thing for which updates/inserts need to be processed.
// Can be used in Insert,Update,Select. Cannot be used to set null values for columns.
func (e *Thing) Setters() (list []p.ColumnAccessor) {
	if e.ID != nil {
		list = append(list, ID.Set(*e.ID))
	}
	if e.Tdate != nil {
		list = append(list, Tdate.Set(*e.Tdate))
	}
	if e.Ttimestamp != nil {
		list = append(list, Ttimestamp.Set(*e.Ttimestamp))
	}
	if e.Tjson != nil {
		list = append(list, Tjson.Set(*e.Tjson))
	}
	return
}

// String returns the debug string for *Thing with all non-nil field values.
func (e *Thing) String() string {
	return p.StringWithFields(e, p.HideNilValues)
}

// AllColumns returns the list of all column accessors for usage in e.g. Select.
func AllColumns() []p.ColumnAccessor {
	return tableAccess.AllColumns
}

// Select returns a new QuerySet[Thing] for fetching column data.
func Select(cas ...p.ColumnAccessor) p.QuerySet[Thing] {
	return p.MakeQuerySet[Thing](tableAccess, cas)
}

// Insert creates a MutationSet for inserting data with zero or more columns.
func Insert(cas ...p.ColumnAccessor) p.MutationSet[Thing] {
	return p.MakeMutationSet[Thing](tableAccess, cas, p.MutationInsert)
}

// Delete creates a MutationSet for deleting data.
func Delete() p.MutationSet[Thing] {
	return p.MakeMutationSet[Thing](tableAccess, p.EmptyColumnAccessor, p.MutationDelete)
}

// Update creates a MutationSet to update zero or more columns.
func Update(cas ...p.ColumnAccessor) p.MutationSet[Thing] {
	return p.MakeMutationSet[Thing](tableAccess, cas, p.MutationUpdate)
}
