package products
// generated by pgtalk-gen on Fri, 17 Dec 2021 20:25:59 CET 
// DO NOT EDIT

import (
	p "github.com/emicklei/pgtalk"
	"time"
	"github.com/jackc/pgtype"
)

// Product is generated from the public.products table.
type Product struct {
	ID	*int64 // id : integer
	CreatedAt	*time.Time // created_at : timestamp with time zone
	UpdatedAt	*time.Time // updated_at : timestamp with time zone
	DeletedAt	*time.Time // deleted_at : timestamp with time zone
	Code	*string // code : text
	Price	*int64 // price : bigint
	CategoryId	*int64 // category_id : bigint
}

var (	
	// ID represents the column "id" of with type "integer", nullable:true, primary:true
	ID = p.NewInt64Access(p.MakeColumnInfo(tableInfo, "id", p.IsPrimary, p.NotNull, 1),
		func(dest interface{}, v *int64) { dest.(*Product).ID = v })	
	// CreatedAt represents the column "created_at" of with type "timestamp with time zone", nullable:false, primary:false
	CreatedAt = p.NewTimeAccess(p.MakeColumnInfo(tableInfo, "created_at", p.NotPrimary, p.Nullable, 2),
		func(dest interface{}, v *time.Time) { dest.(*Product).CreatedAt = v })	
	// UpdatedAt represents the column "updated_at" of with type "timestamp with time zone", nullable:false, primary:false
	UpdatedAt = p.NewTimeAccess(p.MakeColumnInfo(tableInfo, "updated_at", p.NotPrimary, p.Nullable, 3),
		func(dest interface{}, v *time.Time) { dest.(*Product).UpdatedAt = v })	
	// DeletedAt represents the column "deleted_at" of with type "timestamp with time zone", nullable:false, primary:false
	DeletedAt = p.NewTimeAccess(p.MakeColumnInfo(tableInfo, "deleted_at", p.NotPrimary, p.Nullable, 4),
		func(dest interface{}, v *time.Time) { dest.(*Product).DeletedAt = v })	
	// Code represents the column "code" of with type "text", nullable:false, primary:false
	Code = p.NewTextAccess(p.MakeColumnInfo(tableInfo, "code", p.NotPrimary, p.Nullable, 5),
		func(dest interface{}, v *string) { dest.(*Product).Code = v })	
	// Price represents the column "price" of with type "bigint", nullable:false, primary:false
	Price = p.NewInt64Access(p.MakeColumnInfo(tableInfo, "price", p.NotPrimary, p.Nullable, 6),
		func(dest interface{}, v *int64) { dest.(*Product).Price = v })	
	// CategoryId represents the column "category_id" of with type "bigint", nullable:false, primary:false
	CategoryId = p.NewInt64Access(p.MakeColumnInfo(tableInfo, "category_id", p.NotPrimary, p.Nullable, 7),
		func(dest interface{}, v *int64) { dest.(*Product).CategoryId = v })
	// package private
	_ = time.Now()
	_ = pgtype.Empty // for the occasional unused import
	tableInfo = p.TableInfo{Schema: "public", Name: "products", Alias: "p1" }
)

func init() {
	tableInfo.Columns = []p.ColumnAccessor{ID,CreatedAt,UpdatedAt,DeletedAt,Code,Price,CategoryId, }
}

// SetID set the address of the value to the field value and returns the receiver.
func (e *Product) SetID(v int64) *Product { e.ID = &v ; return e }

// SetCreatedAt set the address of the value to the field value and returns the receiver.
func (e *Product) SetCreatedAt(v time.Time) *Product { e.CreatedAt = &v ; return e }

// SetUpdatedAt set the address of the value to the field value and returns the receiver.
func (e *Product) SetUpdatedAt(v time.Time) *Product { e.UpdatedAt = &v ; return e }

// SetDeletedAt set the address of the value to the field value and returns the receiver.
func (e *Product) SetDeletedAt(v time.Time) *Product { e.DeletedAt = &v ; return e }

// SetCode set the address of the value to the field value and returns the receiver.
func (e *Product) SetCode(v string) *Product { e.Code = &v ; return e }

// SetPrice set the address of the value to the field value and returns the receiver.
func (e *Product) SetPrice(v int64) *Product { e.Price = &v ; return e }

// SetCategoryId set the address of the value to the field value and returns the receiver.
func (e *Product) SetCategoryId(v int64) *Product { e.CategoryId = &v ; return e }

// Setters returns the list of changes to a Product for which updates/inserts need to be processed.
// Can be used in Insert,Update,Select. Cannot be used to set null values for columns.
func (e *Product) Setters() (list []p.ColumnAccessor) {
	if e.ID != nil {
		list = append(list, ID.Set(*e.ID))
	}
	if e.CreatedAt != nil {
		list = append(list, CreatedAt.Set(*e.CreatedAt))
	}
	if e.UpdatedAt != nil {
		list = append(list, UpdatedAt.Set(*e.UpdatedAt))
	}
	if e.DeletedAt != nil {
		list = append(list, DeletedAt.Set(*e.DeletedAt))
	}
	if e.Code != nil {
		list = append(list, Code.Set(*e.Code))
	}
	if e.Price != nil {
		list = append(list, Price.Set(*e.Price))
	}
	if e.CategoryId != nil {
		list = append(list, CategoryId.Set(*e.CategoryId))
	}	
	return
}

// String returns the debug string for *Product with all non-nil field values.
func (e *Product) String() string {
	return p.StringWithFields(e, p.HideNilValues)
}

// AllColumns returns the list of all column accessors for usage in e.g. Select.
func AllColumns() []p.ColumnAccessor {
	return tableInfo.Columns
}

// Select returns a new QuerySet[Product] for fetching column data.
func Select(cas ...p.ColumnAccessor) p.QuerySet[Product] {
	return p.MakeQuerySet[Product](tableInfo, cas)
}

// Insert creates a MutationSet for inserting data with zero or more columns.
func Insert(cas ...p.ColumnAccessor) p.MutationSet[Product] {
	return p.MakeMutationSet[Product](tableInfo, cas, p.MutationInsert)
}

// Delete creates a MutationSet for deleting data.
func Delete() p.MutationSet[Product] {
	return p.MakeMutationSet[Product](tableInfo, p.EmptyColumnAccessor, p.MutationDelete)
}

// Update creates a MutationSet to update zero or more columns.
func Update(cas ...p.ColumnAccessor) p.MutationSet[Product] {
	return p.MakeMutationSet[Product](tableInfo, cas, p.MutationUpdate)
}
