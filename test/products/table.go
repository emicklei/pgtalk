package products
// generated by pgtalk-gen on 2021-07-14 11:47:43.816928 &#43;0200 CEST m=&#43;0.025431602 
// DO NOT EDIT

import (
	"github.com/emicklei/pgtalk"
	"time"
	"fmt"
	"bytes"
	"github.com/jackc/pgx/v4"
)

var (
	_ = time.Now()
	tableInfo = pgtalk.TableInfo{Schema: "public", Name: "products", Alias: "p1"}
)

type Product struct {
	ID	*int64 // bigint
	Created_at	*time.Time // timestamp with time zone
	Updated_at	*time.Time // timestamp with time zone
	Deleted_at	*time.Time // timestamp with time zone
	Code	*string // text
	Price	*int64 // bigint
	Category_id	*int64 // bigint
}

var (	
	ID = pgtalk.NewInt64Access(tableInfo, "id", func(dest interface{}, v *int64) { dest.(*Product).ID = v })	
	Created_at = pgtalk.NewTimeAccess(tableInfo, "created_at", func(dest interface{}, v *time.Time) { dest.(*Product).Created_at = v })	
	Updated_at = pgtalk.NewTimeAccess(tableInfo, "updated_at", func(dest interface{}, v *time.Time) { dest.(*Product).Updated_at = v })	
	Deleted_at = pgtalk.NewTimeAccess(tableInfo, "deleted_at", func(dest interface{}, v *time.Time) { dest.(*Product).Deleted_at = v })	
	Code = pgtalk.NewTextAccess(tableInfo, "code", func(dest interface{}, v *string) { dest.(*Product).Code = v })	
	Price = pgtalk.NewInt64Access(tableInfo, "price", func(dest interface{}, v *int64) { dest.(*Product).Price = v })	
	Category_id = pgtalk.NewInt64Access(tableInfo, "category_id", func(dest interface{}, v *int64) { dest.(*Product).Category_id = v })
)

// String returns the debug string for *Product with all non-nil field values.
func (e *Product) String() string {
	b := new(bytes.Buffer)
	fmt.Fprint(b, "products.Product{")
	if e.ID != nil {
		fmt.Fprintf(b, "ID:%v ", *e.ID)
	}
	if e.Created_at != nil {
		fmt.Fprintf(b, "Created_at:%v ", *e.Created_at)
	}
	if e.Updated_at != nil {
		fmt.Fprintf(b, "Updated_at:%v ", *e.Updated_at)
	}
	if e.Deleted_at != nil {
		fmt.Fprintf(b, "Deleted_at:%v ", *e.Deleted_at)
	}
	if e.Code != nil {
		fmt.Fprintf(b, "Code:%v ", *e.Code)
	}
	if e.Price != nil {
		fmt.Fprintf(b, "Price:%v ", *e.Price)
	}
	if e.Category_id != nil {
		fmt.Fprintf(b, "Category_id:%v ", *e.Category_id)
	}
	fmt.Fprint(b, "}")
	return b.String()
}

// AllColumns returns the list of all column accessors for usage in e.g. Select.
func AllColumns() (all []pgtalk.ColumnAccessor) {
	return append(all,ID,Created_at,Updated_at,Deleted_at,Code,Price,Category_id)
}

// Select returns a new ProductsQuerySet for fetching column data.
func Select(cas ...pgtalk.ColumnAccessor) ProductsQuerySet {
	return ProductsQuerySet{pgtalk.MakeQuerySet(tableInfo, cas, func() interface{} {
		return new(Product)
	})}
}

// ProductsQuerySet can query for *Product values.
type ProductsQuerySet struct {
	pgtalk.QuerySet
}

func (s ProductsQuerySet) Unwrap() pgtalk.QuerySet { return s.QuerySet }

// Where returns a new QuerySet with WHERE clause.
func (s ProductsQuerySet) Where(condition pgtalk.SQLWriter) ProductsQuerySet {
	return ProductsQuerySet{QuerySet: s.QuerySet.Where(condition)}
}

// Limit returns a new QuerySet with the maximum number of results set.
func (s ProductsQuerySet) Limit(limit int) ProductsQuerySet {
	return ProductsQuerySet{QuerySet: s.QuerySet.Limit(limit)}
}

// GroupBy returns a new QuerySet with the GROUP BY clause.
func (s ProductsQuerySet) GroupBy(cas ...pgtalk.ColumnAccessor) ProductsQuerySet {
	return ProductsQuerySet{QuerySet: s.QuerySet.GroupBy(cas...)}
}

// OrderBy returns a new QuerySet with the ORDER BY clause.
func (s ProductsQuerySet) OrderBy(cas ...pgtalk.ColumnAccessor) ProductsQuerySet {
	return ProductsQuerySet{QuerySet: s.QuerySet.OrderBy(cas...)}
}

// Exec runs the query and returns the list of *Product.
func (s ProductsQuerySet) Exec(conn *pgx.Conn) (list []*Product, err error) {
	err = s.QuerySet.ExecWithAppender(conn, func(each interface{}) {
		list = append(list, each.(*Product))
	})
	return
}

// Insert creates a MutationSet for inserting data with zero or more columns.
func Insert(cas ...pgtalk.ColumnAccessor) pgtalk.MutationSet {
	return pgtalk.MakeMutationSet(tableInfo, cas, pgtalk.MutationInsert)
}

// Delete creates a MutationSet for deleting data.
func Delete() pgtalk.MutationSet {
	return pgtalk.MakeMutationSet(tableInfo, pgtalk.EmptyColumnAccessor, pgtalk.MutationDelete)
}

// Update creates a MutationSet to update zero or more columns.
func Update(cas ...pgtalk.ColumnAccessor) pgtalk.MutationSet {
	return pgtalk.MakeMutationSet(tableInfo, cas, pgtalk.MutationUpdate)
}
