package products
// generated by pgtalk-gen on 2021-12-03 13:28:45.875981 &#43;0100 CET m=&#43;0.033137857 
// DO NOT EDIT

import (
	p "github.com/emicklei/pgtalk"
	"time"
	"fmt"
	"bytes"
)

type Product struct {
	ID	*int64 // id : integer
	CreatedAt	*time.Time // created_at : timestamp with time zone
	UpdatedAt	*time.Time // updated_at : timestamp with time zone
	DeletedAt	*time.Time // deleted_at : timestamp with time zone
	Code	*string // code : text
	Price	*int64 // price : bigint
	CategoryId	*int64 // category_id : bigint
}

var (	
	ID = p.NewInt64Access(p.MakeColumnInfo(tableInfo, "id", p.IsPrimary, p.NotNull, 1),
		func(dest interface{}, v *int64) { dest.(*Product).ID = v })	
	CreatedAt = p.NewTimeAccess(p.MakeColumnInfo(tableInfo, "created_at", p.NotPrimary, p.Nullable, 2),
		func(dest interface{}, v *time.Time) { dest.(*Product).CreatedAt = v })	
	UpdatedAt = p.NewTimeAccess(p.MakeColumnInfo(tableInfo, "updated_at", p.NotPrimary, p.Nullable, 3),
		func(dest interface{}, v *time.Time) { dest.(*Product).UpdatedAt = v })	
	DeletedAt = p.NewTimeAccess(p.MakeColumnInfo(tableInfo, "deleted_at", p.NotPrimary, p.Nullable, 4),
		func(dest interface{}, v *time.Time) { dest.(*Product).DeletedAt = v })	
	Code = p.NewTextAccess(p.MakeColumnInfo(tableInfo, "code", p.NotPrimary, p.Nullable, 5),
		func(dest interface{}, v *string) { dest.(*Product).Code = v })	
	Price = p.NewInt64Access(p.MakeColumnInfo(tableInfo, "price", p.NotPrimary, p.Nullable, 6),
		func(dest interface{}, v *int64) { dest.(*Product).Price = v })	
	CategoryId = p.NewInt64Access(p.MakeColumnInfo(tableInfo, "category_id", p.NotPrimary, p.Nullable, 7),
		func(dest interface{}, v *int64) { dest.(*Product).CategoryId = v })
	// package private
	_ = time.Now()
	tableInfo = p.TableInfo{Schema: "public", Name: "products", Alias: "p1"}
	tableAccess = p.TableAccessor{TableInfo: tableInfo, 
		Factory: func() interface{}{return new(Product)}, AllColumns: []p.ColumnAccessor{ID,CreatedAt,UpdatedAt,DeletedAt,Code,Price,CategoryId,
}}
)

// ColumnUpdatesFrom returns the list of changes to a Product for which updates need to be processed.
// Cannot be used to set null values for columns.
func ColumnUpdatesFrom(e *Product) (list []p.SQLExpression) {
	if e.ID != nil {
		list = append(list, ID.Set(*e.ID))
	}
	if e.CreatedAt != nil {
		list = append(list, CreatedAt.Set(*e.CreatedAt))
	}
	if e.UpdatedAt != nil {
		list = append(list, UpdatedAt.Set(*e.UpdatedAt))
	}
	if e.DeletedAt != nil {
		list = append(list, DeletedAt.Set(*e.DeletedAt))
	}
	if e.Code != nil {
		list = append(list, Code.Set(*e.Code))
	}
	if e.Price != nil {
		list = append(list, Price.Set(*e.Price))
	}
	if e.CategoryId != nil {
		list = append(list, CategoryId.Set(*e.CategoryId))
	}	
	return
}

// String returns the debug string for *Product with all non-nil field values.
func (e *Product) String() string {
	b := new(bytes.Buffer)
	fmt.Fprint(b, "products.Product{")
	if e.ID != nil {
		fmt.Fprintf(b, "ID:%v ", *e.ID)
	}
	if e.CreatedAt != nil {
		fmt.Fprintf(b, "CreatedAt:%v ", *e.CreatedAt)
	}
	if e.UpdatedAt != nil {
		fmt.Fprintf(b, "UpdatedAt:%v ", *e.UpdatedAt)
	}
	if e.DeletedAt != nil {
		fmt.Fprintf(b, "DeletedAt:%v ", *e.DeletedAt)
	}
	if e.Code != nil {
		fmt.Fprintf(b, "Code:%v ", *e.Code)
	}
	if e.Price != nil {
		fmt.Fprintf(b, "Price:%v ", *e.Price)
	}
	if e.CategoryId != nil {
		fmt.Fprintf(b, "CategoryId:%v ", *e.CategoryId)
	}
	fmt.Fprint(b, "}")
	return b.String()
}

// AllColumns returns the list of all column accessors for usage in e.g. Select.
func AllColumns() []p.ColumnAccessor {
	return tableAccess.AllColumns
}

// Select returns a new QuerySet[Product] for fetching column data.
func Select(cas ...p.ColumnAccessor) p.QuerySet[Product] {
	return p.MakeQuerySet[Product](tableAccess, cas)
}

// Insert creates a MutationSet for inserting data with zero or more columns.
func Insert(cas ...p.ColumnAccessor) p.MutationSet[Product] {
	return p.MakeMutationSet[Product](tableAccess, cas, p.MutationInsert)
}

// Delete creates a MutationSet for deleting data.
func Delete() p.MutationSet[Product] {
	return p.MakeMutationSet[Product](tableAccess, p.EmptyColumnAccessor, p.MutationDelete)
}

// Update creates a MutationSet to update zero or more columns.
func Update(cas ...p.ColumnAccessor) p.MutationSet[Product] {
	return p.MakeMutationSet[Product](tableAccess, cas, p.MutationUpdate)
}
